-- Command Line Interface (CLI) file for Lynx
local gpu = require("gpu")
local event = require("event")
local keyboard = require("keyboard")
local keyboardTick = 0
local keyboardRepeat = false
local keyFetched = false
local keyboardChar = -1
local keyboardCode = -1
local currCmd = ""
local y = 0

local PATH = {"", "Lynx/system/", "Lynx/Executables/cli/", "Lynx/Executables/"}
local PATHEXT = {".lua", ""}


-- Internal functions
local keyboardListener = function(name, char, ch)
	if char == 17 or char == 16 then
		return
	end
	if name == "keyReleased" then
		keyboardChar = -1
		keyboardCode = -1
	end
	if name == "keyPressed" then
		keyboardChar = ch
		keyboardCode = char
	end
	keyFetched = false
end

-- Interface functions
local function registerListeners()
	event.register("keyPressed", keyboardListener)
	event.register("keyReleased", keyboardListener)
end

local init = function()
	gpu.switchToConsole()
	registerListeners()
	osdbg("[DEBUG] CLI booted")
	print(_G.OSDATA.NAME .. " Disk Operation Environment ".. _G.OSDATA.VERSION)
	print("(c) MicroShit, 1974-1985") -- TODO fix: Â©
end

local quit = function()
	event.cancel("keyPressed", keyboardListener)
	event.cancel("keyReleased", keyboardListener)
end

local function mysplit(inputstr, sep)
        if sep == nil then
                sep = "%s"
        end
        local t={}
        for str in string.gmatch(inputstr, "[^"..sep.."]+") do
                table.insert(t, str)
        end
        return t
end

local function process(cmd)
	local argv = mysplit(cmd, "%s")
	local argc = table.maxn(argv)
	if argc == 0 then
		argv = {""}
	end
	for k, v in pairs(PATH) do
		for j, w in pairs(PATHEXT) do
			if computer.exists(v .. argv[1] .. w) then
				quit()
				local err, ret = dofile(v .. argv[1] .. w)
				if err ~= nil then
					printerr("Error: " .. err)
					return
				end
				if ret ~= nil then
					ret(argc, argv)
				end
				registerListeners()
				return
			end
		end
	end
	printerr("No \"" .. argv[1] .. "\" found!")
	
end

local update = function()
	if keyboardChar ~= -1 then
		if keyboardCode == 10 then
			y = y + 1
			process(currCmd)
			keyboardCode = -1;
			currCmd = ""
			return
		end
		if keyboardCode == 8 and currCmd:len() > 0 then
			gpu.drawText(currCmd:len(), y, " ")
			currCmd = currCmd:sub(1, currCmd:len()-1)
			keyboardCode = -1;
			gpu.flushBuffer()
			
			--return
		end
		if not keyFetched then
			keyFetched = true -- fetch key
			if keyboardChar > 31 and keyboardChar < 255 then
				currCmd = currCmd .. string.char(keyboardChar)
			end
		end
	end
	
	gpu.setColor(0xFFFFFF)
	gpu.drawText(0, y, ">" .. currCmd)
	gpu.flushBuffer()
end

function _G.printerr(msg)
	msg = tostring(msg)
	if msg:len() < 80 then
		gpu.setColor(0xFF0000)
		gpu.drawText(0, y, msg)
		gpu.flushBuffer()
	end
	y = y + 1
end

function _G.print(msg)
	msg = tostring(msg)
	if msg:len() < 80 then
		gpu.setColor(0xFFFFFF)
		gpu.drawText(0, y, msg)
		gpu.flushBuffer()
	end
	y = y + 1
end

return init, update, quit